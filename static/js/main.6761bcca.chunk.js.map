{"version":3,"sources":["header.jpg","cappuccino.png","mocha.png","espresso.png","madeleine.png","croissant.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","imgHeaderStyle","width","borderImageOutset","roundButton","fontSize","paddingLeft","paddingRight","borderRadius","regButton","margin","App","state","cartItems","appendToOrder","item","setState","prevState","className","Card","id","Header","Title","src","header","style","alt","Body","Table","hover","capDrink","Button","variant","onClick","this","mocha","espresso","madeleine","croissant","colSpan","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,wUCerCC,EAAiB,CACrBC,MAAM,MACNC,kBAAmB,QAEfC,EAAc,CAClBC,SAAS,OACTC,YAAY,OACZC,aAAa,OACbC,aAAa,QAETC,EAAY,CAChBJ,SAAS,OACTK,OAAO,OAwEMC,E,4MAlEbC,MAAQ,CACNC,UAAW,G,EAIbC,cAAgB,SAACC,GACf,EAAKC,UACH,SAAAC,GAAS,MAAK,CAACJ,UAAWI,EAAUJ,UAAY,O,uDAKlD,OACE,yBAAKK,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACC,EAAA,EAAD,CAAMC,GAAG,QACP,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,KAAY,yBAAKC,IAAKC,IAAQC,MAAOxB,EAAgByB,IAAI,UAE3D,kBAACP,EAAA,EAAKQ,KAAN,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACT,GAAG,SACd,+BACE,4BACE,4BAAI,yBAAKG,IAAKO,IAAUL,MAAO,CAACvB,MAAM,QAASkB,GAAG,YAAYM,IAAI,SAClE,0CACA,qCACA,4BAAI,kBAACK,EAAA,EAAD,CAAQC,QAAQ,kBAAkBP,MAAOrB,EAAa6B,QAASC,KAAKpB,eAApE,OAEN,4BACE,4BAAI,yBAAKS,IAAKY,IAAOV,MAAO,CAACvB,MAAM,QAASkB,GAAG,YAAYM,IAAI,SAC/D,qCACA,qCACA,4BAAI,kBAACK,EAAA,EAAD,CAAQC,QAAQ,kBAAkBP,MAAOrB,EAAc6B,QAASC,KAAKpB,eAArE,OAEN,4BACE,4BAAI,yBAAKS,IAAKa,IAAUX,MAAO,CAACvB,MAAM,QAAUkB,GAAG,YAAYM,IAAI,SACnE,wCACA,qCACA,4BAAI,kBAACK,EAAA,EAAD,CAAQC,QAAQ,kBAAkBP,MAAOrB,EAAc6B,QAASC,KAAKpB,eAArE,OAEN,4BACE,4BAAI,yBAAKS,IAAKc,IAAWZ,MAAO,CAACvB,MAAM,QAAUkB,GAAG,YAAYM,IAAI,SACpE,0CAAe,yCACf,qCACA,4BAAI,kBAACK,EAAA,EAAD,CAAQC,QAAQ,kBAAkBP,MAAOrB,EAAc6B,QAASC,KAAKpB,eAArE,OAEN,4BACE,4BAAI,yBAAKS,IAAKe,IAAWb,MAAO,CAACvB,MAAM,QAASkB,GAAG,YAAYM,IAAI,SACnE,yCACA,qCACA,4BAAI,kBAACK,EAAA,EAAD,CAAQC,QAAQ,kBAAkBP,MAAOrB,EAAc6B,QAASC,KAAKpB,eAArE,OAEN,4BACE,wBAAIyB,QAAS,GACb,8BAAM,kBAACR,EAAA,EAAD,CAAQC,QAAQ,kBAAkBP,MAAOhB,GAAzC,mBAAoE,+BAAQyB,KAAKtB,MAAMC,YAA7F,IAAyH,kBAACkB,EAAA,EAAD,CAAQC,QAAQ,kBAAkBP,MAAOhB,GAAzC,iC,GAvD3H+B,IAAMC,WCpBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6761bcca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header.382aa56f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cappuccino.eed1ddc2.png\";","module.exports = __webpack_public_path__ + \"static/media/mocha.a34f7ca8.png\";","module.exports = __webpack_public_path__ + \"static/media/espresso.ea06928e.png\";","module.exports = __webpack_public_path__ + \"static/media/madeleine.2218b44e.png\";","module.exports = __webpack_public_path__ + \"static/media/croissant.77ddaa70.png\";","import React from 'react';\nimport header from './header.jpg'\nimport './App.css';\nimport Button from 'react-bootstrap/Button'\nimport Card from 'react-bootstrap/Card'\nimport Table from 'react-bootstrap/Table'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport capDrink from './cappuccino.png'\nimport mocha from './mocha.png'\nimport espresso from './espresso.png'\nimport madeleine from './madeleine.png'\nimport croissant from './croissant.png'\n\n\n\nconst imgHeaderStyle = {\n  width:'50%',\n  borderImageOutset: '10px'\n};\nconst roundButton = {\n  fontSize:\"25px\",\n  paddingLeft:\"15px\",\n  paddingRight:\"15px\",\n  borderRadius:\"50px\"\n};\nconst regButton = {\n  fontSize:\"25px\",\n  margin:\"5px\"\n}\n\n\n\nclass App extends React.Component {\n  state = {\n    cartItems: 0\n  };\n\n  //function\n  appendToOrder = (item) => {\n    this.setState(\n      prevState => ({cartItems: prevState.cartItems + 1})\n    )\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Card id=\"card\">\n            <Card.Header>\n              <Card.Title><img src={header} style={imgHeaderStyle} alt=\"img\"></img></Card.Title>\n            </Card.Header>\n            <Card.Body>\n              <Table hover id=\"table\">\n                <thead>\n                  <tr>\n                    <th><img src={capDrink} style={{width:\"75px\"}} id=\"drink-img\" alt=\"img\"></img></th>\n                    <th>cappuccino</th>\n                    <th>$2.99</th>\n                    <th><Button variant=\"outline-warning\" style={roundButton} onClick={this.appendToOrder}>+</Button></th>\n                  </tr>\n                  <tr>\n                    <th><img src={mocha} style={{width:\"75px\"}} id=\"drink-img\" alt=\"img\"></img></th>\n                    <th>mocha</th>\n                    <th>$3.25</th>\n                    <th><Button variant=\"outline-warning\" style={roundButton}  onClick={this.appendToOrder}>+</Button></th>\n                  </tr>\n                  <tr>\n                    <th><img src={espresso} style={{width:\"75px\"}}  id=\"drink-img\" alt=\"img\"></img></th>\n                    <th>espresso</th>\n                    <th>$1.99</th>\n                    <th><Button variant=\"outline-warning\" style={roundButton}  onClick={this.appendToOrder}>+</Button></th>\n                  </tr>\n                  <tr>\n                    <th><img src={madeleine} style={{width:\"75px\"}}  id=\"drink-img\" alt=\"img\"></img></th>\n                    <th>madeleines <small>3 pcs</small></th>\n                    <th>$0.99</th>\n                    <th><Button variant=\"outline-warning\" style={roundButton}  onClick={this.appendToOrder}>+</Button></th>\n                  </tr>\n                  <tr>\n                    <th><img src={croissant} style={{width:\"75px\"}} id=\"drink-img\" alt=\"img\"></img></th>\n                    <th>croissant</th>\n                    <th>$1.99</th>\n                    <th><Button variant=\"outline-warning\" style={roundButton}  onClick={this.appendToOrder}>+</Button></th>\n                  </tr>\n                  <tr>\n                    <td colSpan={4}>\n                    <span><Button variant=\"outline-warning\" style={regButton}>Items in order: <small>{this.state.cartItems}</small></Button> <Button variant=\"outline-warning\" style={regButton}>Payment Settings</Button></span>\n                    </td>\n                  </tr>\n                </thead>\n              </Table>\n          </Card.Body>\n          </Card>\n        </header>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}