{"version":3,"sources":["logo.svg","Note.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","cardStyle","border","Note","props","toDoCheckToggled","setState","isItemDone","state","inputBgColor","className","Card","style","Form","inline","Group","Check","type","id","onChange","this","checked","Control","placeholder","backgroundColor","Button","variant","onClick","onDelete","icon","faTrashAlt","React","Component","App","createNewTodo","numChildren","list","items","push","handleDelete","key","itemId","indexToRemove","i","length","splice","Header","Title","Fab","color","aria-label","Body","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.51f8c446.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Note.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\n//yarn start\r\n//put const styles here\r\nconst cardStyle = {\r\n    border:\"0px transparent\"\r\n}\r\n\r\nclass Note extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isItemDone : false,\r\n            inputBgColor : \"white\"\r\n        }\r\n    }\r\n    \r\n    toDoCheckToggled = () => {\r\n        this.setState({\r\n            isItemDone: !this.state.isItemDone,\r\n            inputBgColor: this.state.isItemDone ? \"white\" : \"lightgreen\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"Note\">\r\n                <Card style={cardStyle}>\r\n                    <Form inline>\r\n                        <Form.Group>\r\n                            \r\n                            <Form.Check type=\"checkbox\" id=\"chkBox\" onChange={this.toDoCheckToggled} checked={this.state.isItemDone}/>\r\n\r\n                            <Form.Control type=\"text\" placeholder=\"Enter your to-do note here\" style={{backgroundColor: this.state.inputBgColor}}/>\r\n\r\n                            <Button variant=\"outline-danger\" className=\"float-right\" onClick={() => this.props.onDelete(this.props.id)}>\r\n                                <FontAwesomeIcon icon={faTrashAlt}/>\r\n                            </Button>\r\n\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Note;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Card from 'react-bootstrap/Card';\nimport Note from './Note';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\n//run yarn start\n\nclass App extends React.Component {\n\n  //initally render 3 to do note components\n  constructor() {\n    super();\n    this.state = {\n      numChildren : 3,\n      items : [<Note onDelete={this.handleDelete} key={1} id={1001}></Note>,\n              <Note onDelete={this.handleDelete} key={2} id={1002}></Note>,\n              <Note onDelete={this.handleDelete} key={3} id={1003}></Note>]\n    }\n  }\n  //event on click\n  createNewTodo = () => {\n    this.setState({\n      numChildren : this.state.numChildren += 1\n    })\n    //append a new to do component and set state for items\n    const list = this.state.items;\n    list.push(<Note onDelete={this.handleDelete} key={this.state.numChildren} id={1000 + this.state.numChildren}></Note>);\n    this.setState({items : list});\n  }\n\n  handleDelete = (itemId) => {\n    const list = this.state.items;\n    var indexToRemove = 0;\n    for(var i = 0; i < this.state.items.length; i+=1){\n      //grab just id from props\n      var element = this.state.items[i].props.id;\n      \n      if(element === itemId) {\n        indexToRemove = i;\n        break;\n      }\n    }\n    //splice\n    list.splice(indexToRemove, 1);\n    \n    //setstate for list and numChildren\n    this.setState({items : list});\n\n    this.setState({\n      numChildren : this.state.numChildren -= 1,\n    })\n  }\n\n  render() {\n\n    //store a list of to-do note components to render\n    //js functions can also be written here\n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {/* card component, title/header should be to-do app \n          have a floating plus button at the bottom right\n          each new to-do component is a card containing a check box,\n          text input (200 chars limit), and an 'x' button to delete it*/}\n          <Card id=\"card\">\n            <Card.Header id=\"cardTitle\">\n              <Card.Title>To-do list App<Fab color=\"primary\" aria-label=\"add\" id=\"addNote\" onClick={this.createNewTodo}>+</Fab></Card.Title>\n            </Card.Header>\n            <Card.Body id=\"parentNode\">\n              {this.state.items}\n            </Card.Body>\n          </Card>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}